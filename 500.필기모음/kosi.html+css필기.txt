2022/09/07)

address : 주소 정보
figure : 이미지 박스  
figcaption : 이미지 설명
article : 박스 안에서 독립된 내용
blockquote : 인용된 내용
div : 아무거나
cite : 주석하고는 다르게 실제 코드에 들어가고 인용된 사이트 주소를 쓰는 것이다. 프로그래머가 사용, 화면에는 출력X / 작품명을 의미
dir : 방향지정(기본값은 rtl)
alt(필수 조건) : 웹 접근성을 위한 것으로 화면 리더기가 읽게끔 만들 수 있다 . 또한 주소가 잘 못될 경우 출력
rel(필수 조건) : 링크 종류를 구분한다.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/08)

overflow : 크기에 맞춰서 설정(기존에 설정이 있다면 거기에 맞춰짐)
float : 지정한 쪽으로 보낸다
text-indent : 첫 글자 들여쓰기
font-weight : 글자 굵기 설정
letter-spacing : 글자 간격
list-style-type : 리스트 타입 설정
# : id요소를 css로 가져올 때 사용하는 것 
:hover : 가상 클래스 - 마우스 오버 시
border-radius : 이미지 모서리 둥근게 설정

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/13)

인라인 - 002.블록과인라인.html / 64줄 참고
블록 - 002.블록과인라인.html / 32줄 참고

nth-child와 nth-of-type의 차이
- nth-child : 속성 상관 없이 순서대로 설정하는 것
- nth-of-type : 속성끼리 순서대로 설정하는 것

outline과 border의 차이
- outline : 주변에 영향 X (보이기만 함)
- border : 주변에 영향 O (영역에 영향을 미침)

CSS에서 함수를 지정할 때 (띄어쓰기)와 >의 차이
- (띄어쓰기) : 하위 모든 자손 중 하나 지정
- > : 한 단계 아래 자손 중 하나 지정

!import : 우선 순위로 설정(!사용 주의! - 위치 관계 혼선)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/15)

float을 사용할 시 마지막에 clear을 써야만 부모 박스가 고장 나지 않는다.
clear을 사용 시 float에 다음 줄을 사용 가능하다.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/16)

opacity : 투명도 설정
transition : 위치 이동 시 움직이는 효과
z-index : z축 의미(순서 설정, 0 미만으로 내려갈 시 static 밑에 위치, !사용 주의! - 위치 관계 혼선)
position : 
    - static : (기본값)
        -> 위치 이동값 사용 불가능(top, bottom, left, right)
        -> 위치 이동은 margin 사용(다른 요소에 영향을 미치고 -를 사용할 경우, 겹칠 수도 있다)
        -> 부모 요소로 사용 불가능
    - relative : 
        -> 위치 이동값 사용 가능(top, bottom, left, right)
        -> 이동해도 원래 자신의 위치가 보존되어 디자인 손상x
        -> 위치값은 위 아래 / 왼 오른 중 각 하나 씩 선택해 2가지로 설정한다
        -> 위치 이동값을 사용하지 않을 경우, static과 같은 특징을 가진다
        -> static보다 항상 위에 위치하며 static 포지션이 아닌 경우, 나중에 그려진 요소가 위에 위치한다
        -> 부모자격으로 많이 사용
    - absolute : 
        -> 부모를 기준으로 위치를 이동
        -> 위치 설정을 하지 않을 시, 젠틀앱솔루트(static한 요소 뒤에 위치)
        -> 부모가 없으면 보이는 화면(window)를 기준으로 하며 body가 아니다
    - fixed : 
        -> 위치값이 없을 경우, static한 요소 아래에 있으며 스크롤 시 화면을 지키고 움직이지 않는다
        -> 보이는 화면(window)를 기준으로 위치를 선정하고 다른 부모 요소를 무시한다
        -> 크기를 정하지 않을 경우, 내용물을 따른다
        -> 인라인요소도 fixed를 주면 블록요소로 전환
    - sticky : 
        -> top에 따라 화면에 고정되는 포지션으로 다른 요소에게 밀린다
        -> top을 설정하지 않을 경우, 그대로 유지

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20022/09/19)

background-image : 배경의 이미지를 설정하는 것으로 사진이 아닌 색을 채울 수도 있다
iframe : inline frame에서 나온 말로 외부 다른 시스템이나 페이지 혹은 정보를 내부 특정 영역에 불러와 보여준다
    - 크기 보더 속성 변경은 CSS에서 하는 것이 좋다
    - 기본 디자인은 프레임보더(테두리)가 있다

그라데이션 - 선형 : linear-gradient(방향/각도, 색1 비율%, 색2 비율%,...);
                 -> 방향값 : to top / to bottom / to left / to right
                 -> 각도값 : 숫자deg -> deg는 degree에서 나온 말
                 -> 안 쓰면 to bottom이 기본값
                 -> 색상 뒤에 비율을 안쓰면 등분은 가능
           - 원형 : radial-gradiient(옵션, 색1 비율%, 색2 비율%,...);
                 -> 세부 옵션 종류 4가지:
                    (1) closest-side : 원형 그래디언트의 크기가 가장 가까운 면에 닿을 만큼의 크기로 설정
                    (2) farthest-side : 원형 그래디언트의 크기가 가장 먼 면에 닿을 만큼의 크기로 설정
                    (3) closest-corner : 원형 그래디언트의 크기가 가장 가까운 모서리에 닿을 만큼의 크기로 설정
                    (4) farthest-corner : 원형 그래디언트의 크기가 가장 먼 모서리에 닿을 만큼의 크기로 설정

클리핑 - 이미지의 일부영역을 지정하여 부분만 보이게하는 display기법
    1. 정원 클리핑 : clip-path: circle(반지름 at x좌표 y좌표);
        -> 값을 설정하지 않으면 이미지를 채우는 중심원이 나온다
    2. 타원 클리핑 : clip-path: ellipse(장축 단축 at x좌표 y좌표);
        -> 값을 설정하지 않으면 이미지를 채우는 타원이 나온다
    3. 다각형 클리핑 : clip-path: polygon(x1 y1,x2 y2,...);
        -> 값을 비울 수 없다
        -> 좌표값은 %, px 모두 사용 가능하다
    4. !svg 개인적으로 공부! : clip-path: url(#아이디명);
    5. masking : -webkit-mask-image: linear-gradient(방향값, black 30%, transparent 80%);
        -> 이미지 일부를 자연스럽게 숨기는 기법
        -> 아직 웹표준기술은 아니다
        -> 셋팅법이 배경이미지 셋팅과 유사하며 linear-gradient와 같은 그라데이션 함수를 이용하여 셋팅한다
        -> 검은색 부분은 보이는 영역, 투명색은 숨기는 영역이다

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/20)

text-align: justify; : 양쪽 정렬 justify - 단어 단위로 잘리기 때문에 단어 간격이 일정하지 않고 공백이 많다
column-count : 다중열 설정
column-rule : 다중열 구분선 설정 - border색상과 유사
column-gap : 다중열 사이 간격 설정
word-break: break-all; : 단어 깨기 - 1byte문자인 영어는 깨주어야 공백이 생지기 않는다(2byte문자는 상관 없다

transition - CSS속성값이 변경하는 과정을 애니메이션으로 보여주는 속성 - transition: 속성명 시간(s) ease-@ 대기시간(s);
    -> 마우스 오버 시 혹은 미리 셋팅된 클래스에 설정하여 JS로 클래스를 요소에 부여해도 적용 가능
        1. 속성명 : 애니메이션 대상 속성을 지정하는 것으로 all 사용 시, 모든 속성에 애니메이션 설정이 가능(all은 생략 가능)
        2. 시간 : 애니메이션 동작 시간(뒤에 s)
        3. ease-@ : 가속도 설정
            - ease-in : 시작 구간은 천천히
            - ease-out : 끝 구간은 천천히
            - ease-in-out : 시작과 끝 구간 모두 천천히
            - linear : 등속도
            - ease : 시작과 끝 구간 모두 약간 천천히(기본값)
            - 그 외에 다양한 가속도가 있다
        4. 대기 시간 : 애니메이션 시작 잔 대기 시간(뒤에 s)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/21)

CSS 변수 지정 - :root{--변수명: 값px/%;}
transform - 선택요소의 크기, 회전, 이동, 기울기 등을 변형하기 위한 속성(2D, 3D 지원)
    1. rotateY(deg) - Y축 회전
    2. rotateX(deg) - X축 회전
    3. translateX(px/%) - X축 이동
    4. translateY(px/%) - Y축 이동
    5. translate(X축, Y축) - X,Y축 이동
    6. rotate(deg) - 원형 회전
    7. skewX() - x축 기울임
    8. skewY() - y축 기울임
    9. skew(X축, Y축) - x,y축 기울임
    10. scale(x축배수,y축배수)

filter - 흑백, 흐림, 세피아, 명암, 채도 등 출력 이미지를 변경하는 속성
    1. filter: blur() : 흐림 효과
    2. filter: brightness() : 밝기 효과
    3. filter: contrast() : 대비 효과
    4. filter: drop-shadow() : 그림자 효과
    5. filter: grayscale() : 흑백 효과
    6. filter: hue-rotate() : 색조 회전 효과
    7. filter: invert() : 반전 효과
    8. filter: opacity() : 불투명도 효과
    9. filter: saturate() : 포화 효과
    10. filter: sepia() : 세피아 효과

애니메이션 - 시간에 따라 CSS설정이 변경되어 애니메이션이 되도록 키프레임을 설정하고 호출하여 의도된 연출을 하는 것
    애니메이션 키프레임 설정 - 1) @keyframes 키프레임명{
                                   from{CSS}
                                   to{CSS}
                                }
     
                             2) @keyframes 키프레임명{
                                   0%{CSS}
                                   50%{CSS}
                                   100%{CSS}
                                }
    키프레임 호출 - animation: 이름 동작시간 ease-@ 대기시간 반복횟수 방향 상태유지;
        1. 이름 : 키프레임 이름
        2. 동작시간 : 애니메이션 동작 시간
        3. ease-@ : 가속도 설정 - 2022/09/20) 참고
        4. 대기시간 : 애니메이션 시작 대기 시간
        5. 반복횟수 : 애니메이션 반벅 횟수
        6. 방향 : 갔다 왔다를 1번으로 할 것인지, 그냥 1번으로 할 것인지
        7. 상태유지 : 상태 유지 여부 - 반복횟수가 infinite면 의미 없다
            - backwards : 처음 설정으로 돌아가라(기본값)
            - fowards : 애니메이션 동작 상태 저장

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/22) - js시작

************JS************
document : html문서 전체 객체
getElementById('') : id를 가져오는 함수
innerHTML ='' : html코드를 넣는 메서드
getElementsByClassName('') : class를 가져오는 함수
item() : 몇 번째 아이템인지
length() : 문자열 길이
style : html의 css속성을 모두 정의하는 객체
var : js 변수 속성
querySelector('') : 하나뿐인 css요소를 선택
querySelectorAll('') : 여러 css요소 중 하나를 선택
innerText : 선택요소 내부에 글자 데이터 넣기

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/23)

sprites - 하나의 큰 이미지를 사용하여 위치값을 변경함으로 각 각의 이미지를 표현하는 기법
    - 이미지 용량이 줄어들고 랜더링 속도가 빨라진다
    - 대부분 모바일에서 용량 및 속도 이슈가 있으므로 sprites 기법을 사용
    - 요즘은 DT(데이스탑)에소도 많이 사용
    - 이미지는 원본보다 2배 정도 작게 한다(줌을 당겼을 때, 해상도를 위해)
    - inline요소는 가로 세로 지정이 안되기에 display: block;을 사용하여 block요소로 바꿔주고
      불필요한 부분은 overflow: hidden으로 가려준다

************JS************
JS 변수 - 데이터를 저장할 수 있는 메모리공간
    - 변수명 지정 방법 - (데이터형) (변수명) = (데이터);
        1) 캐믈 케이스(Camel Case) - 첫단어는 소문자, 뒷단어는 첫글자 대문자
        2) 파스칼 케이스(Pascal Case) - 모든 단어 첫글자 대문자
        3) 스네이크 케이스(Snake Case) - 단어사이에 언더바(_) 사용
    - 숫자로 시작할 수 없고 예약어 또한 사용이 불가능하다
write() : 화면 출력(print)
    - write(${}+""+${}+""+${}+"");
    - write(`
          ${}<br>
      `);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/26)

미디어쿼리 - css학습_01 참고

글자 단위 - 012.글자단위html 참고

뷰포트 단위 - 015.뷰포트단위.html 참고

************JS************
산술연산자(사칙연산) : + -> +, - -> -, × -> *, ÷ -> /
나머지 연산자 : %
비교연산자 : true / fales의 결과값만을 가진다
    - <
    - >
    - <<
    - >>
    - <=
    - >=
    - ==
    - !=
    - ===
    - !===
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2022/09/27)
웹폰트 - 009.웹폰트.html 참고

Nav 참고

************JS************
if문 - if(){} else if(){} else{}
    다른 언어들과 동일한 사용 방법

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
혼자 공부해 볼 것)
- css 클리핑 svg
- canvas 코딩
